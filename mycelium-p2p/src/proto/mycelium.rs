// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Post {
    #[prost(string, tag = "1")]
    pub author_peer_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub timestamp: i64,
    #[prost(bytes = "vec", tag = "3")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Reaction {
    #[prost(string, tag = "1")]
    pub responder_peer_id: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub post_id: ::prost::alloc::vec::Vec<u8>,
    #[prost(enumeration = "reaction::Type", tag = "3")]
    pub kind: i32,
    #[prost(int64, tag = "4")]
    pub timestamp: i64,
}
/// Nested message and enum types in `Reaction`.
pub mod reaction {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
    #[repr(i32)]
    pub enum Type {
        Copy = 0,
        Echo = 1,
    }
    impl Type {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Copy => "COPY",
                Self::Echo => "ECHO",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "COPY" => Some(Self::Copy),
                "ECHO" => Some(Self::Echo),
                _ => None,
            }
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ack {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignedPost {
    #[prost(message, optional, tag = "1")]
    pub payload: ::core::option::Option<Post>,
    /// author's ed25519 signature
    #[prost(bytes = "vec", tag = "2")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignedReaction {
    #[prost(message, optional, tag = "1")]
    pub payload: ::core::option::Option<Reaction>,
    /// responder's ed25519 signature
    #[prost(bytes = "vec", tag = "2")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
/// acknowledgment for mutual authentication
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SignedAck {
    #[prost(message, optional, tag = "1")]
    pub payload: ::core::option::Option<Ack>,
    #[prost(bytes = "vec", tag = "2")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
